C4Deployment
title "WaveTap - Deployment (Containerized)"

Deployment_Node(edge, "Edge Host", "Linux") {
    Node(rtlsdr_usb, "RTL-SDR Dongle", "USB RF Frontend") {
    Container(sdr, "USB RTL-SDR", "Software Defined Radio (SDR)")
    }
    Node(cap_pod, "SDR Capture Pod", "Docker") {
        Container(sdr_cap, "SDR Capture Service", "Python", "Processes RF signals and publishes IQ data")
    }
}

Deployment_Node(local, "Local Windows Host", "Windows 10/11") {
    Node(ui_dev, "UI Environment", "Python") {
        Container(ui, "Local GUI", "Python", "Provides user interface for data visualization")
    }
}

Deployment_Node(standalone, "Docker Server", "Linux") {
    Node(msg, "Message Bus", "NATS/Kafka") {
        Container(msg_bus, "Message Bus", "Handles IQ data streams")
    }
    Node(coord_pod, "Coordinator Pod", "Docker") {
        Container(arb, "Coordinator / Arbiter", "Python", "Manages tuning, decoding, and events")
    }
    Node(dec_pod1, "Decoder Pod ADS-B", "Docker") {
        Container(dec_adsb, "ADS-B Decoder", "Python", "Decodes ADS-B signals")
    }
    Node(dec_pod2, "Alternate Decoder Pod", "Docker") {
        Container(dec_fm, "Future Decoder", "Python", "Decodes other RF signal")
    }
    Node(cache_pod, "Redis Pod", "Docker") {
        Container(cache, "Redis", "In-Memory", "Caches live state data")
    }
    Node(db_pod, "Database Pod", "Docker") {
        ContainerDb(db, "Storage Database", "SQL", "Historical tracks, logs")
    }
    Node(api_pod, "API Gateway Pod", "Docker") {
        Component(api, "API Gateway", "FastAPI", "Provides API access to clients")
    }
}


Rel(sdr, sdr_cap, "USB connection to")
Rel(sdr_cap, msg_bus, "Publishes IQ data to")
Rel(dec_adsb, msg_bus, "Subscribes to IQ data")
Rel(dec_fm, msg_bus, "Subscribes to IQ data")
Rel(arb, sdr_cap, "Sends tuning commands to")
Rel(dec_adsb, cache, "Updates live state data in")
Rel(api, cache, "Queries live state data from")
Rel(api, db, "Reads from and writes to")
Rel(ui, api, "Interacts with", "HTTP/WebSocket")